- name: Deploy Talos Cluster on Proxmox
  hosts: localhost
  gather_facts: false
  vars_files:
    - group_vars/all.yml
    - group_vars/vault.yml
  vars:
    iso_filename: "talos-{{ talos_version }}.iso"

  tasks:
    - name: Force stop existing Talos VMs
      shell: "qm stop {{ item.vm_id }}"
      delegate_to: "{{ proxmox_api_host }}"
      become: true
      loop: "{{ nodes }}"
      ignore_errors: true

    - name: Remove existing Talos VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        state: absent
      loop: "{{ nodes }}"
      ignore_errors: true

    - name: Clean up old configuration files
      file:
        path: "{{ talos_config_dir }}"
        state: absent
      ignore_errors: true

    - name: Ensure talos-config directory exists
      file:
        path: "{{ talos_config_dir }}/patches"
        state: directory
        mode: '0755'

    - name: Generate Talos schematics for each node
      template:
        src: templates/talos-schematic.yaml.j2
        dest: "{{ talos_config_dir }}/schematic-{{ item.name }}.yaml"
      loop: "{{ nodes }}"

    - name: Upload schematics to Talos Factory and get schematic IDs
      uri:
        url: "https://factory.talos.dev/schematics"
        method: POST
        body: "{{ lookup('file', talos_config_dir + '/schematic-' + item.name + '.yaml') }}"
        headers:
          Content-Type: "application/yaml"
        status_code: 201
      register: schematic_upload
      loop: "{{ nodes }}"

    - name: Download custom Talos ISO for each node
      get_url:
        url: "https://factory.talos.dev/image/{{ item.json.id }}/v{{ talos_version | regex_replace('^v', '') }}/metal-amd64.iso"
        dest: "/tmp/talos-custom-{{ nodes[ansible_loop.index0].name }}-{{ talos_version }}.iso"
        mode: '0644'
        timeout: 300
      loop: "{{ schematic_upload.results }}"
      loop_control:
        extended: true
      retries: 3
      delay: 30

    - name: Upload custom Talos ISOs to Proxmox
      copy:
        src: "/tmp/talos-custom-{{ item.name }}-{{ talos_version }}.iso"
        dest: "/mnt/pve/isos/template/iso/talos-custom-{{ item.name }}-{{ talos_version }}.iso"
        mode: '0644'
      delegate_to: "{{ proxmox_api_host }}"
      become: true
      loop: "{{ nodes }}"

    - name: Generate Talos patches for each node
      template:
        src: templates/controlplane-patch.yaml.j2
        dest: "{{ talos_config_dir }}/patches/controlplane-patch-{{ item.ip }}.yaml"
      loop: "{{ nodes }}"

    # Using custom Talos Factory image instead of standard ISO

    - name: Create base VMs on Proxmox
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        vmid: "{{ item.vm_id }}"
        memory: "{{ item.memory }}"
        cores: "{{ item.cores }}"
        net:
          net0: 'model=virtio,bridge=vmbr0'
        scsi:
          scsi0: "{{storage}}:32"
        scsihw: "virtio-scsi-single"
        ide:
          ide2: "{{iso_storage}}:iso/talos-custom-{{ item.name }}-{{ talos_version }}.iso,media=cdrom"
        ostype: "l26"
        cpu: host
        boot: "order=ide2;scsi0"
        state: present
        description: "Talos node deployed via Ansible"
      loop: "{{ nodes }}"

    - name: Wait for VMs to be fully created
      pause:
        seconds: 10

    - name: Verify VMs exist before starting
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        state: current
      loop: "{{ nodes }}"
      register: vm_status
      until: vm_status is not failed
      retries: 5
      delay: 5

    # Configuration will be applied using base config + patches

    # Talos will boot from ISO with default settings and use machine config for network

    - name: Start VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        state: started
      loop: "{{ nodes }}"

    - name: Wait for Talos API on all nodes
      wait_for:
        host: "{{ item.ip }}"
        port: 50000
        timeout: 300
      loop: "{{ nodes }}"

    - name: Generate base Talos configuration for cluster initialization
      command: |
        talosctl gen config talos-cluster https://{{ controlplane_vip }}:6443 --output-dir {{ talos_config_dir }} --talos-version {{ talos_version }}
      args:
        creates: "{{ talos_config_dir }}/controlplane.yaml"

    - name: Update controlplane.yaml with cluster configuration
      lineinfile:
        path: "{{ talos_config_dir }}/controlplane.yaml"
        regexp: "^    # allowSchedulingOnControlPlanes: true"
        line: "    allowSchedulingOnControlPlanes: true"
        state: present

    - name: Configure CNI to disable default installation
      replace:
        path: "{{ talos_config_dir }}/controlplane.yaml"
        regexp: "        # # The CNI used.\n        # cni:\n        #     name: custom # Name of CNI to use.\n        #     # URLs containing manifests to apply for the CNI.\n        #     urls:\n        #         - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml"
        replace: "        # The CNI used.\n        cni:\n            name: none # Disable default CNI installation"

    - name: Add API server certificate SANs to controlplane.yaml
      lineinfile:
        path: "{{ talos_config_dir }}/controlplane.yaml"
        insertafter: "        certSANs:"
        line: "            - {{ controlplane_vip }}"
        state: present

    - name: Update time server in controlplane.yaml
      replace:
        path: "{{ talos_config_dir }}/controlplane.yaml"
        regexp: "time.cloudflare.com"
        replace: "ntp1.sirim.my"

    - name: Apply Talos configuration to all nodes with machine-specific patches
      command: |
        talosctl --nodes {{ item.ip }} \
                --endpoints {{ item.ip }} \
                --talosconfig {{ talos_config_dir }}/talosconfig \
                apply-config \
                --file {{ talos_config_dir }}/controlplane.yaml \
                --config-patch @{{ talos_config_dir }}/patches/controlplane-patch-{{ item.ip }}.yaml \
                --insecure
      loop: "{{ nodes }}"
      register: talos_config_result
      until: talos_config_result.rc == 0
      retries: 3
      delay: 30

    - name: Wait for nodes to restart and Talos API to be available
      wait_for:
        host: "{{ item.ip }}"
        port: 50000
        timeout: 300
        delay: 30
      loop: "{{ nodes }}"

    - name: Bootstrap the first control plane node
      command: |
        talosctl --nodes {{ nodes[0].ip }} \
                --endpoints {{ nodes[0].ip }} \
                --talosconfig {{ talos_config_dir }}/talosconfig \
                bootstrap
      run_once: true

    - name: Wait for Kubernetes API to be available
      uri:
        url: "https://{{ controlplane_vip }}:6443/livez"
        method: GET
        validate_certs: false
        status_code: [200, 401]
      register: k8s_api_check
      until: k8s_api_check.status in [200, 401]
      retries: 30
      delay: 10

    - name: Get kubeconfig
      command: |
        talosctl --nodes {{ nodes[0].ip }} \
                --endpoints {{ nodes[0].ip }} \
                --talosconfig {{ talos_config_dir }}/talosconfig \
                kubeconfig {{ talos_config_dir }}/kubeconfig
      run_once: true

    - name: Generate VIP kubeconfig (keeps VIP endpoint)
      command: |
        talosctl --nodes {{ nodes[0].ip }} \
                --endpoints {{ nodes[0].ip }} \
                --talosconfig {{ talos_config_dir }}/talosconfig \
                kubeconfig {{ talos_config_dir }}/kubeconfig-vip
      run_once: true

    - name: Update kubeconfig to use reachable endpoint
      replace:
        path: "{{ talos_config_dir }}/kubeconfig"
        regexp: "server: https://{{ controlplane_vip }}:6443"
        replace: "server: https://{{ nodes[0].ip }}:6443"


    - name: Install Calico CNI
      shell: |
        kubectl --kubeconfig {{ talos_config_dir }}/kubeconfig apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.0/manifests/calico.yaml
      run_once: true
      register: calico_install
      until: calico_install.rc == 0
      retries: 5
      delay: 15

    - name: Wait for Calico DaemonSet to be ready
      shell: |
        kubectl --kubeconfig {{ talos_config_dir }}/kubeconfig rollout status daemonset/calico-node -n kube-system --timeout=300s
      run_once: true

